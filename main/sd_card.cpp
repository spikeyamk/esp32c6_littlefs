#include <thread>
#include <chrono>
#include <memory>
#include <numeric>

#include <trielo/trielo.hpp>

#include "sd_card.hpp"

SD_Card::SD_Card() {
    assert(init() == ESP_OK);
}

SD_Card& SD_Card::get_instance() {
    static SD_Card obj {};
    return obj;
}

esp_err_t SD_Card::init() {
    if(Trielo::trielo<spi_bus_initialize>(Trielo::OkErrCode(ESP_OK), slot_config.host_id, &bus_cfg, SDSPI_DEFAULT_DMA)) {
        return -1;
    }

    if(Trielo::trielo<sdspi_host_init>(Trielo::OkErrCode(ESP_OK)) != ESP_OK) {
        return -2;
    }

    if(Trielo::trielo<sdspi_host_init_device>(Trielo::OkErrCode(ESP_OK), &slot_config, &handle) != ESP_OK) {
        return -3;
    }

    if(Trielo::trielo<sdmmc_card_init>(Trielo::OkErrCode(ESP_OK), &host, &card) != ESP_OK) {
        return -4;
    }

    Trielo::trielo<sdmmc_card_print_info>(stdout, &card);

    return ESP_OK;
}

esp_err_t SD_Card::deinit() {
    if(Trielo::trielo<sdspi_host_remove_device>(Trielo::OkErrCode(ESP_OK), handle) != ESP_OK) {
        return -1;
    }
    std::this_thread::sleep_for(std::chrono::milliseconds(100));

    if(Trielo::trielo<sdspi_host_deinit>(Trielo::OkErrCode(ESP_OK)) != ESP_OK) {
        return -2;
    }
    std::this_thread::sleep_for(std::chrono::milliseconds(100));

    if(Trielo::trielo<spi_bus_free>(Trielo::OkErrCode(ESP_OK), slot_config.host_id) != ESP_OK) {
        return -3;
    }

    return ESP_OK;
}

esp_err_t SD_Card::check_all_blocks() {
    static const std::array<uint8_t, 512> urazr {
        0xac, 0x72, 0x1b, 0x29, 0x76, 0x1c, 0x09, 0x56, 
        0xd6, 0xc6, 0xe9, 0xb4, 0x4e, 0x84, 0x01, 0xdc, 
        0x4e, 0x77, 0x62, 0x53, 0xa2, 0xb4, 0x2e, 0x75, 
        0xe6, 0x69, 0x65, 0x69, 0x70, 0x53, 0xc8, 0x81, 
        0x43, 0xb5, 0x7b, 0xe5, 0xc8, 0x81, 0xba, 0x2a, 
        0xa7, 0x80, 0x07, 0x46, 0x39, 0x26, 0x4f, 0xd7, 
        0xf2, 0x1b, 0xf1, 0xd4, 0x0d, 0xae, 0x90, 0x37, 
        0x96, 0xa6, 0x2b, 0x50, 0x76, 0x82, 0x78, 0x77, 
        0x8a, 0x86, 0x4c, 0x5d, 0xb5, 0xa7, 0x6c, 0x63, 
        0xe1, 0xf9, 0x43, 0xda, 0x51, 0xac, 0x73, 0xdf, 
        0xfb, 0x4b, 0xc0, 0x30, 0x5b, 0x89, 0x37, 0x85, 
        0x1c, 0x3d, 0xc8, 0xd5, 0xbc, 0x21, 0xc2, 0x51, 
        0x3b, 0x21, 0xc6, 0xed, 0xe0, 0x3b, 0x07, 0x4b, 
        0xe7, 0x88, 0x0b, 0xa0, 0xaf, 0x3e, 0x84, 0xb4, 
        0x83, 0xe6, 0xb0, 0xb4, 0xf3, 0xcf, 0x38, 0x3b, 
        0xce, 0xbb, 0x2f, 0x87, 0x17, 0x25, 0x68, 0x7a, 
        0x29, 0x6b, 0x82, 0xe1, 0x1d, 0x03, 0x98, 0x10, 
        0x5d, 0x2e, 0x12, 0xeb, 0xa4, 0x89, 0xc2, 0x8b, 
        0x4c, 0xe4, 0x73, 0x94, 0x18, 0x66, 0xaf, 0xcc, 
        0x10, 0x3c, 0x8d, 0x01, 0xc0, 0x0c, 0x9c, 0xab, 
        0x17, 0xb3, 0x00, 0x60, 0xb7, 0xcd, 0x74, 0xbe, 
        0xe0, 0x34, 0x0c, 0xf3, 0x8b, 0x95, 0xfd, 0xd5, 
        0xb9, 0x95, 0x80, 0xaa, 0x05, 0x66, 0x18, 0x6a, 
        0xc5, 0x5d, 0x5c, 0xff, 0x86, 0x2d, 0xc2, 0x08, 
        0x6a, 0x31, 0xb3, 0x9e, 0xe7, 0x2f, 0xf2, 0x71, 
        0xc4, 0x91, 0xb9, 0x20, 0x43, 0xfc, 0xcb, 0xf0, 
        0x0c, 0xcb, 0xce, 0xd9, 0x8b, 0xf3, 0xfb, 0x8b, 
        0xba, 0xbd, 0x64, 0x87, 0xab, 0x9f, 0x77, 0x17, 
        0xec, 0x3f, 0x97, 0x78, 0xcc, 0xe2, 0x86, 0x65, 
        0x63, 0xa7, 0x82, 0x47, 0xa5, 0xa6, 0x40, 0x0d, 
        0xfb, 0x82, 0xf4, 0xe7, 0x1a, 0x02, 0xba, 0x26, 
        0x32, 0x96, 0x8a, 0x5e, 0xc0, 0x76, 0x26, 0x4d, 
        0x6e, 0x36, 0x1c, 0x26, 0xc8, 0x05, 0x61, 0xf3, 
        0xe5, 0xdf, 0x49, 0x80, 0xa8, 0xb0, 0x12, 0xf7, 
        0x4c, 0xb2, 0xe2, 0x62, 0xbb, 0x34, 0x2b, 0x30, 
        0xc2, 0x47, 0x47, 0x2c, 0x36, 0xa7, 0x7f, 0x97, 
        0xd6, 0x23, 0xea, 0x73, 0xf2, 0x68, 0x57, 0x7d, 
        0x78, 0x79, 0xd4, 0x5f, 0xb5, 0xfe, 0x0b, 0x87, 
        0x37, 0x26, 0x3e, 0xdd, 0x28, 0xe5, 0xf3, 0xe6, 
        0xea, 0xae, 0x1b, 0xc7, 0x31, 0x4b, 0x27, 0x3b, 
        0xd9, 0x9d, 0x5e, 0x85, 0x19, 0xeb, 0xe8, 0x9e, 
        0x99, 0xb6, 0x7e, 0x54, 0xc3, 0xac, 0xc7, 0x22, 
        0x17, 0x23, 0xea, 0x47, 0x70, 0x4c, 0xde, 0xe3, 
        0x70, 0x8e, 0x61, 0x4a, 0x06, 0x4f, 0xcd, 0x91, 
        0x0b, 0x6e, 0x3b, 0x85, 0x99, 0xa0, 0x6b, 0xa7, 
        0x48, 0x45, 0x52, 0x84, 0x9a, 0xea, 0xde, 0xc9, 
        0xe6, 0x05, 0x32, 0xeb, 0x16, 0x32, 0xb9, 0xb3, 
        0x43, 0x5c, 0xe4, 0x59, 0x50, 0x91, 0x0f, 0xc3, 
        0x34, 0x4b, 0xa0, 0x06, 0xe6, 0xe6, 0xbf, 0xa9, 
        0x98, 0x56, 0xb6, 0x19, 0x8c, 0xa1, 0xfe, 0xca, 
        0xf5, 0x5d, 0x17, 0xd7, 0xe5, 0xbf, 0x25, 0x96, 
        0xbf, 0x9e, 0x71, 0x2e, 0x70, 0x1b, 0x9b, 0x50, 
        0x9a, 0x92, 0x29, 0x76, 0xb5, 0xea, 0xd6, 0xe5, 
        0xb4, 0x35, 0x10, 0xbc, 0x1d, 0x0c, 0xe6, 0xc7, 
        0x5d, 0xfb, 0x93, 0xb1, 0xe7, 0xab, 0x50, 0xac, 
        0x82, 0xe5, 0xf3, 0x31, 0x09, 0xcc, 0x78, 0x72, 
        0x73, 0x7b, 0x20, 0x53, 0x4f, 0x2a, 0xb7, 0x44, 
        0x4b, 0xe7, 0xa2, 0xc0, 0xee, 0xac, 0x27, 0xc6, 
        0x3c, 0x8c, 0xdf, 0x4c, 0x30, 0x41, 0xf2, 0x80, 
        0x09, 0x41, 0xc7, 0xcb, 0xce, 0x8c, 0xff, 0x75, 
        0x29, 0xcb, 0x42, 0x23, 0xe5, 0x3c, 0x11, 0x14, 
        0x5d, 0x1b, 0xc8, 0x8a, 0x0a, 0x55, 0xeb, 0x37, 
        0x6c, 0xa5, 0x9b, 0xbc, 0x2b, 0x3a, 0x10, 0xc3, 
        0xe7, 0x02, 0x31, 0xba, 0xa7, 0x29, 0x27, 0x66,
    };

    std::shared_ptr<std::optional<size_t>> done { std::make_shared<std::optional<size_t>>(0) };
    std::thread([](const std::shared_ptr<std::optional<size_t>> done, const size_t block_count) {
        const int64_t sleep_s { 3 };
        for(
            size_t i = 0, current = done->value(), before = current;
            done->has_value();
            [&i, &current, &before, block_count, &done]() {
                before = current;
                current = done->value_or(block_count);
                if(i == 9) {
                    i = 0;
                } else {
                    i++;
                }
            }()
        ) {
            const float average_speed_s {
                (
                    static_cast<float>(
                        current > before ?
                            current - before
                            : before - current
                    )
                )
                / static_cast<float>(sleep_s)
            };
            const std::chrono::seconds eta { static_cast<int64_t>(block_count / average_speed_s) };
            const std::chrono::hours eta_h { std::chrono::duration_cast<std::chrono::hours>(eta) };
            const std::chrono::minutes eta_m { std::chrono::duration_cast<std::chrono::minutes>(eta) - std::chrono::duration_cast<std::chrono::minutes>(eta_h) };
            const std::chrono::seconds eta_s { eta - std::chrono::duration_cast<std::chrono::seconds>(eta_h) - std::chrono::duration_cast<std::chrono::seconds>(eta_m) };
            std::cout
                << "SD_Card::check_all_blocks: done: '" << done->value_or(block_count) << "' "
                << "out of: '" << block_count << "' blocks "
                << "average speed: '" << average_speed_s << "' blocks/s "
                << "ETA: '" << eta_h << ' ' << eta_m << ' ' << eta_s << "' "
                << std::endl;
            std::this_thread::sleep_for(std::chrono::seconds(sleep_s));
        }
    }, done, card.csd.capacity).detach();

    for(
        ;
        done->value() < card.csd.capacity;
        done->emplace(done->value() + 1)
    ) {
        if(sdmmc_write_sectors(&card, urazr.data(), done->value(), 1) != ESP_OK) {
            std::printf("sdmmc_write_sectors(&card, urazr.data(), %zu, 1) != ESP_OK)\n", done->value());
            done->reset();
            return ESP_FAIL;
        }

        static std::array<uint8_t, urazr.size()> read_buf;
        read_buf.fill(0);
        if(sdmmc_read_sectors(&card, read_buf.data(), done->value(), 1) != ESP_OK) {
            std::printf("sdmmc_read_sectors(&card, read_buf.data(), %zu, 1) != ESP_OK)\n", done->value());
            done->reset();
            return ESP_FAIL;
        }

        if(read_buf != urazr) {
            std::printf("read_buf != urazr, i: %zu\n", done->value());
            done->reset();
            return ESP_FAIL;
        }
    }

    done->reset();
    return ESP_OK;
}
